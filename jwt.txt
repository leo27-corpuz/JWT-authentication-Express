let refreshTokens = []
app.get('/posts', authenticateToken, (req, res) => {
    res.send(req.user.email)
})
app.post('/token', (req, res) => {
    const refreshToken = req.body.token
    if(refreshToken == null) return res.sendStatus(401)
    if(refreshTokens.includes(refreshToken)) return res.sendStatus(403)
    jsonwebtoken.verify(refreshToken, process.env.REFRESH_TOKEN_SECRET, (err, user) => {
        if(err) return res.sendStatus(403)
        const accessToken = jsonwebtoken.sign({ email: user.email})
        res.json({ accessToken: accessToken })
    })
})
app.post('/login', (req, res) => {
    const email = req.body.email
    const user = { email: email}
    const accessToken = jsonwebtoken.sign(user, process.env.ACCESS_TOKEN_SECRET, {expiresIn: '30s'})
    const refreshToken = jsonwebtoken.sign(user, process.env.REFRESH_TOKEN_SECRET)
    refreshTokens.push(refreshToken)
    res.json({accessToken: accessToken, refreshToken: refreshToken})
})
function authenticateToken(req, res, next){
    const authHeader = req.headers['authorization']
    const token = authHeader && authHeader.split(' ')[1]
    if(token == null) return res.sendStatus(401)
    jsonwebtoken.verify(token, process.env.ACCESS_TOKEN_SECRET, (err, user) => {
        if(err) return res.sendStatus(403)
        req.user = user
        next()
    })
}